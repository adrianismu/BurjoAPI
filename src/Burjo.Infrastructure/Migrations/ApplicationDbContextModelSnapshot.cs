// <auto-generated />
using System;
using Burjo.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Burjo.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("Burjo.Core.Entities.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("TargetRiskCategory")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("target_risk_category");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_exercises_name");

                    b.HasIndex("TargetRiskCategory")
                        .HasDatabaseName("ix_exercises_target_risk_category");

                    b.ToTable("exercises", (string)null);
                });

            modelBuilder.Entity("Burjo.Core.Entities.HealthCondition", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("ChronicDiseases")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("chronic_diseases");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<int>("DailyPhysicalActivityMinutes")
                        .HasColumnType("INTEGER")
                        .HasColumnName("daily_physical_activity_minutes");

                    b.Property<string>("PhysicalActivityComplaints")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("physical_activity_complaints");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_profile_id");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId")
                        .IsUnique()
                        .HasDatabaseName("ix_health_conditions_user_profile_id");

                    b.ToTable("health_conditions", (string)null);
                });

            modelBuilder.Entity("Burjo.Core.Entities.MoodLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("LoggedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("logged_at");

                    b.Property<int>("Mood")
                        .HasColumnType("INTEGER")
                        .HasColumnName("mood");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("notes");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("LoggedAt")
                        .HasDatabaseName("ix_mood_logs_logged_at");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_mood_logs_user_id");

                    b.HasIndex("UserId", "LoggedAt")
                        .HasDatabaseName("ix_mood_logs_user_id_logged_at");

                    b.ToTable("mood_logs", (string)null);
                });

            modelBuilder.Entity("Burjo.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Email");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Burjo.Core.Entities.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("FitnessLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<double>("HeightCm")
                        .HasPrecision(5, 2)
                        .HasColumnType("REAL");

                    b.Property<string>("MedicalHistory")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<double>("WeightKg")
                        .HasPrecision(5, 2)
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("IX_UserProfiles_UserId");

                    b.ToTable("UserProfiles", (string)null);
                });

            modelBuilder.Entity("Burjo.Core.Entities.UserScheduleItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<int>("Day")
                        .HasColumnType("INTEGER")
                        .HasColumnName("day");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("INTEGER")
                        .HasColumnName("duration_minutes");

                    b.Property<string>("ExerciseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("exercise_name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_schedule_items_user_id");

                    b.HasIndex("UserId", "Day")
                        .HasDatabaseName("ix_user_schedule_items_user_id_day");

                    b.ToTable("user_schedule_items", (string)null);
                });

            modelBuilder.Entity("Burjo.Core.Entities.HealthCondition", b =>
                {
                    b.HasOne("Burjo.Core.Entities.UserProfile", "UserProfile")
                        .WithOne("HealthCondition")
                        .HasForeignKey("Burjo.Core.Entities.HealthCondition", "UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Burjo.Core.Entities.MoodLog", b =>
                {
                    b.HasOne("Burjo.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Burjo.Core.Entities.UserProfile", b =>
                {
                    b.HasOne("Burjo.Core.Entities.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("Burjo.Core.Entities.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Burjo.Core.Entities.UserScheduleItem", b =>
                {
                    b.HasOne("Burjo.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Burjo.Core.Entities.User", b =>
                {
                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Burjo.Core.Entities.UserProfile", b =>
                {
                    b.Navigation("HealthCondition");
                });
#pragma warning restore 612, 618
        }
    }
}
